(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var apply, curry, flip, fix, over, memoize, slice$ = [].slice, toString$ = {}.toString;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
memoize = function(f){
  var memo;
  memo = {};
  return function(){
    var args, key, arg;
    args = slice$.call(arguments);
    key = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(arg + toString$.call(arg).slice(8, -1));
      }
      return results$;
    }()).join('');
    return memo[key] = key in memo
      ? memo[key]
      : f.apply(null, args);
  };
};
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over,
  memoize: memoize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;
each = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition = curry$(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p, xs){
  return span(compose$(p, not$), xs);
});
zip = curry$(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function not$(x){ return !x; }
},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x, y){
  return ~~(x / y);
});
rem = curry$(function(x$, y$){
  return x$ % y$;
});
div = curry$(function(x, y){
  return Math.floor(x / y);
});
mod = curry$(function(x$, y$){
  var ref$;
  return (((x$) % (ref$ = y$) + ref$) % ref$);
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, resultObj$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, resultObj$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  }
  return resultObj$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  }
  return resultObj$;
});
compact = function(object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
};
filter = curry$(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
reject = curry$(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
});
join = curry$(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x){
  return x;
};
isType = curry$(function(type, x){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.1.2';
module.exports = prelude;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":1,"./List.js":2,"./Num.js":3,"./Obj.js":4,"./Str.js":5}],7:[function(require,module,exports){
(function (global){
(function(){
  var i$, ref$, len$, module;
  if (typeof global != 'undefined' && global) {
    import$(global, require('prelude-ls'));
  }
  angular.module("dsc", ["ngRoute", "ngResource", "LocalStorageModule", "angucomplete-alt", "ui.grid", "ui.grid.autoResize"]).filter('percentage', function($filter){
    return function(input, decimals){
      decimals == null && (decimals = 0);
      return $filter('number')(input * 100, decimals) + '%';
    };
  });
  require('./app/routes');
  require('./app/services/storage-service');
  require('./app/services/external-data-service');
  require('./app/services/data-export-service');
  (function(){
    require('./modules/armor-calc/main.js');require('./modules/guide/main.js');require('./modules/inventory/main.js');require('./modules/items/main.js');require('./modules/pc/main.js');require('./modules/w-calc/main.js');
  });
  for (i$ = 0, len$ = (ref$ = ['guide', 'items', 'inventory', 'pc', 'w-calc', 'armor-calc']).length; i$ < len$; ++i$) {
    module = ref$[i$];
    require("./modules/" + module + "/main.js");
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./app/routes":8,"./app/services/data-export-service":9,"./app/services/external-data-service":10,"./app/services/storage-service":11,"./modules/armor-calc/main.js":15,"./modules/guide/main.js":18,"./modules/inventory/main.js":22,"./modules/items/main.js":29,"./modules/pc/main.js":33,"./modules/w-calc/main.js":39,"prelude-ls":6}],8:[function(require,module,exports){
(function(){
  angular.module("dsc").config(function($routeProvider){
    $routeProvider.when('/guide/:section', {
      templateUrl: 'modules/guide/view.html',
      controller: 'GuideController'
    }).when('/items', {
      templateUrl: 'modules/items/view.html',
      controller: 'ItemsController'
    }).when('/inventory', {
      templateUrl: 'modules/inventory/inventory-view.html',
      controller: 'InventoryController'
    }).when('/stats', {
      templateUrl: 'modules/pc/view.html',
      controller: 'PcController'
    }).when('/w-calc', {
      templateUrl: 'modules/w-calc/view.html',
      controller: 'WeaponCalcController'
    }).when('/a-calc', {
      templateUrl: 'modules/armor-calc/view.html',
      controller: 'ArmorCalcController'
    }).otherwise({
      redirectTo: '/guide/intro'
    });
  });
}).call(this);

},{}],9:[function(require,module,exports){
(function(){
  angular.module("dsc").service('dataExportSvc', function(){
    return {
      exportJson: function(data){
        window.open(encodeURI("data:application/json," + JSON.stringify(data)));
      },
      exportCsv: function(data){
        var firstLine, rows, i$, len$, item, row, key, value, output;
        firstLine = join(',')(
        keys(
        first(
        data)));
        rows = [];
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          item = data[i$];
          row = [];
          for (key in item) {
            value = item[key];
            if (typeof value === "string") {
              value = value.replace('"', '""').replace(/(\r\n|\n|\r)/g, '\\n');
              value = "\"" + value + "\"";
            }
            row.push(value);
          }
          row = join(',')(
          row);
          rows.push(row);
        }
        output = firstLine + "\n" + join("\n")(
        rows);
        window.open(encodeURI("data:text/plain," + output));
      }
    };
  });
}).call(this);

},{}],10:[function(require,module,exports){
(function(){
  var ExternalDataService;
  if (typeof angular != 'undefined' && angular !== null) {
    angular.module("dsc").service("externalDataSvc", function($resource, $q){
      return new ExternalDataService($resource, $q);
    });
  }
  ExternalDataService = (function(){
    ExternalDataService.displayName = 'ExternalDataService';
    var prototype = ExternalDataService.prototype, constructor = ExternalDataService;
    function ExternalDataService($resource, $q){
      this.$resource = $resource;
      this.$q = $q;
      this.loadJson = bind$(this, 'loadJson', prototype);
      this._cache = {};
    }
    /**
     * Load an external JSON resource and parse it into an array
     */
    prototype.loadJson = function(url, returnPromise){
      var task, ref$, this$ = this;
      returnPromise == null && (returnPromise = true);
      if (url == null || typeof url !== "string" || url.length < 1) {
        throw new Error("Invalid URL: [" + url + "]");
      }
      task = this.$q.defer();
      if (empty(
      (ref$ = this._cache)[url] || (ref$[url] = []))) {
        this._cache[url] = this.$resource(url).query(function(){
          task.resolve(this$._cache[url]);
        });
      } else {
        task.resolve(this._cache[url]);
      }
      return returnPromise
        ? task.promise
        : this._cache[url];
    };
    return ExternalDataService;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ExternalDataService;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{}],11:[function(require,module,exports){
(function(){
  angular.module("dsc").config(function(localStorageServiceProvider){
    localStorageServiceProvider.setPrefix("DSC");
  }).service('storageSvc', [
    'localStorageService', function(localStorage){
      return {
        save: function(key, data){
          localStorage.set(key, data);
        },
        load: function(key){
          return localStorage.get(key);
        }
      };
    }
  ]);
}).call(this);

},{}],12:[function(require,module,exports){
(function(){
  angular.module("dsc").controller("ArmorCalcController", function($q, $scope, itemSvc, armorCalcSvc, pcService, uiGridConstants){
    var x$;
    $scope.results = [];
    $scope.maxLoad = 0;
    $scope.reservedWeight = 50;
    $scope.availableLoad = 0;
    $scope.maxLoad = 40 + pcService.statValueOf('endurance');
    $scope.typeNames = {
      0: 'head',
      1: 'chest',
      2: 'hands',
      3: 'legs'
    };
    $scope.partNames = ['head', 'chest', 'hands', 'legs'];
    x$ = $scope.gridOptions = require('./controller/gridOptions')(uiGridConstants);
    x$.data = $scope.results;
    $scope.calculate = function(type){
      type == null && (type = 'offence');
      armorCalcSvc.freeWeight = $scope.availableLoad = $scope.maxLoad - $scope.reservedWeight;
      armorCalcSvc.findBestCombinations().then(function(results){
        var i$, len$, result;
        $scope.results = [];
        for (i$ = 0, len$ = results.length; i$ < len$; ++i$) {
          result = results[i$];
          $scope.results.push({
            score: result.score,
            weight: result.weight,
            armors: join(', ')(
            map(fn$)(
            result.armors))
          });
        }
        $scope.gridOptions.data = $scope.results;
        function fn$(it){
          return it.name;
        }
      });
    };
  });
}).call(this);

},{"./controller/gridOptions":14}],13:[function(require,module,exports){
(function(){
  var ArmorCalcSvc;
  if (typeof angular != 'undefined' && angular !== null) {
    angular.module("dsc").service("armorCalcSvc", function(inventorySvc, itemSvc, itemUpgradeSvc, $q){
      return new ArmorCalcSvc(inventorySvc, itemSvc, itemUpgradeSvc, $q);
    });
  }
  ArmorCalcSvc = (function(){
    ArmorCalcSvc.displayName = 'ArmorCalcSvc';
    var prototype = ArmorCalcSvc.prototype, constructor = ArmorCalcSvc;
    function ArmorCalcSvc(_inventorySvc, _itemSvc, _itemUpgradeSvc, $q){
      this._inventorySvc = _inventorySvc;
      this._itemSvc = _itemSvc;
      this._itemUpgradeSvc = _itemUpgradeSvc;
      this.$q = $q;
      this.findAllAvailableUpgradesFor = bind$(this, 'findAllAvailableUpgradesFor', prototype);
      this.calculateScoreFor = bind$(this, 'calculateScoreFor', prototype);
      this.findAllCombinationsOf = bind$(this, 'findAllCombinationsOf', prototype);
      this.findUsableArmors = bind$(this, 'findUsableArmors', prototype);
      this.takeOnlyAffordable = bind$(this, 'takeOnlyAffordable', prototype);
      this.findBestCombinations = bind$(this, 'findBestCombinations', prototype);
      this.freeWeight = 0;
      this.armorTypes = ['head', 'chest', 'hands', 'legs'];
      this.armorTypeKeys = {
        'head': 0,
        'chest': 1,
        'hands': 2,
        'legs': 3
      };
    }
    prototype.findBestCombinations = function(params){
      var staticArmors, dynamicArmors, canAfford, this$ = this;
      if (params == null) {
        params = {
          takeBest: 2
        };
      }
      staticArmors = [];
      dynamicArmors = [];
      canAfford = [];
      return this.findUsableArmors().then(function(armors){
        staticArmors = filter(function(it){
          return it.matSetId < 0;
        })(
        armors);
        dynamicArmors = reject(function(it){
          return it.upgradeId < 0;
        })(
        armors);
        return this$.findAllCombinationsOf(dynamicArmors);
      }).then(function(combinations){
        var i$, len$, comb, best, j$, ref$, len1$, armor;
        for (i$ = 0, len$ = combinations.length; i$ < len$; ++i$) {
          comb = combinations[i$];
          comb.score = this$.calculateScoreFor(comb);
        }
        best = take(params['takeBest'])(
        reverse(
        sortBy(function(it){
          return it.score;
        })(
        combinations)));
        dynamicArmors = [];
        for (i$ = 0, len$ = best.length; i$ < len$; ++i$) {
          comb = best[i$];
          for (j$ = 0, len1$ = (ref$ = comb.armors).length; j$ < len1$; ++j$) {
            armor = ref$[j$];
            dynamicArmors.push(armor);
          }
        }
        dynamicArmors = unique(
        dynamicArmors);
      }).then(function(){
        var promises, i$, ref$, len$, armor;
        promises = [];
        for (i$ = 0, len$ = (ref$ = dynamicArmors).length; i$ < len$; ++i$) {
          armor = ref$[i$];
          promises.push(this$.findAllAvailableUpgradesFor(armor).then(fn$));
        }
        return this$.$q.all(promises);
        function fn$(upgrades){
          return dynamicArmors = dynamicArmors.concat(upgrades);
        }
      }).then(function(){
        this$._debugLog = false;
        return this$.findAllCombinationsOf(dynamicArmors);
      }).then(function(combinations){
        return this$.takeOnlyAffordable(combinations);
      }).then(function(combs){
        var sets, best, i$, len$, set, bestArmors;
        sets = Obj.values(
        groupBy(function(it){
          return it.pieces;
        })(
        combs));
        best = [];
        for (i$ = 0, len$ = sets.length; i$ < len$; ++i$) {
          set = sets[i$];
          best.push(first(
          reverse(
          sortBy(fn$)(
          set))));
        }
        bestArmors = [];
        for (i$ = 0, len$ = best.length; i$ < len$; ++i$) {
          set = best[i$];
          bestArmors = bestArmors.concat(set.armors);
        }
        bestArmors = unique(
        bestArmors).concat(staticArmors);
        return this$.findAllCombinationsOf(bestArmors);
        function fn$(it){
          return it.upgradeLevel;
        }
      }).then(function(combs){
        return this$.takeOnlyAffordable(combs);
      }).then(function(combs){
        return map(function(it){
          it.score = this$.calculateScoreFor(it);
          return it;
        })(
        combs);
      });
    };
    /**
     * Given a list of combinations, only take those that the user can afford.
     */
    prototype.takeOnlyAffordable = function(combinations){
      var canAfford, i$, len$, comb, promises, j$, ref$, len1$, armor, k$, ref1$, len2$, aCost, cCost, this$ = this;
      canAfford = [];
      for (i$ = 0, len$ = combinations.length; i$ < len$; ++i$) {
        comb = combinations[i$];
        comb.totalCost = [];
        promises = [];
        for (j$ = 0, len1$ = (ref$ = filter(fn$)(
        comb.armors)).length; j$ < len1$; ++j$) {
          armor = ref$[j$];
          for (k$ = 0, len2$ = (ref1$ = armor.totalCost).length; k$ < len2$; ++k$) {
            aCost = ref1$[k$];
            cCost = find(fn1$)(
            comb.totalCost);
            if (cCost == null) {
              cCost = {
                matId: aCost.matId,
                matCost: 0
              };
              comb.totalCost.push(cCost);
            }
            cCost.matCost += aCost.matCost;
          }
        }
        promises.push(fn2$(comb));
      }
      return this.$q.all(promises).then(function(){
        return canAfford;
      });
      function fn$(it){
        return it.totalCost != null;
      }
      function fn1$(it){
        return it.matId === aCost.matId;
      }
      function fn2$(comb){
        return this$._inventorySvc.load().then(function(inventory){
          var materials, can, i$, ref$, len$, cost, material;
          materials = filter(function(it){
            return it.itemType === 'item';
          })(
          inventory);
          can = true;
          for (i$ = 0, len$ = (ref$ = comb.totalCost).length; i$ < len$; ++i$) {
            cost = ref$[i$];
            material = find(fn$)(
            materials);
            if (!(material != null && material.amount >= cost.matCost)) {
              can = false;
            }
          }
          if (can) {
            canAfford.push(comb);
            return comb;
          } else {
            return null;
          }
          function fn$(it){
            return it.id === cost.matId;
          }
        });
      }
    };
    /**
     * Find armors fit for using in calculations.
     */
    prototype.findUsableArmors = function(){
      var this$ = this;
      return this._inventorySvc.load().then(function(inventory){
        return this$.$q.all(map(function(entry){
          return this$._itemSvc.findAnyItem(function(it){
            return it.uid === entry.uid;
          });
        })(
        filter(function(it){
          return it.itemType === 'armor';
        })(
        inventory)));
      }).then(function(armors){
        return filter(function(it){
          return it.weight <= this$.freeWeight;
        })(
        armors);
      });
    };
    /**
     * Take a list of armors and generate every possible combination of them
     * within the current weight limit.
     * @returns Promise that will be resolved with an array of combinations.
     */
    prototype.findAllCombinationsOf = function(armors){
      var def, combinations, empties, i$, ref$, len$, index, type, empty, groupOf, lengths, combCount, prod, splitAt, b, combinationIndex, indexes, a, combination, log, ciKey, seq, key, piece, x$, split, jumpTo, comb, this$ = this;
      def = this.$q.defer();
      combinations = [];
      empties = [];
      for (i$ = 0, len$ = (ref$ = this.armorTypes).length; i$ < len$; ++i$) {
        index = i$;
        type = ref$[i$];
        empty = find(fn$)(
        armors);
        if (empty == null) {
          empty = this._itemSvc.createItemModel({
            itemType: 'armor',
            name: "(bare " + type + ")",
            armorType: type,
            weight: 0,
            upgradeId: -1,
            id: -(index + 1)
          });
          armors.push(empty);
        }
        empties.push(empty);
      }
      groupOf = groupBy(function(it){
        return it.armorType;
      })(
      armors);
      lengths = map(function(it){
        return (it != null ? it.length : void 8) || 0;
      })(
      [groupOf['head'], groupOf['chest'], groupOf['hands'], groupOf['legs']]);
      combCount = product(
      lengths);
      prod = 1;
      splitAt = [0, 0, 0, 0];
      for (i$ = 0, len$ = (ref$ = [1, 3, 0, 2]).length; i$ < len$; ++i$) {
        b = ref$[i$];
        prod *= lengths[b];
        splitAt[b] = combCount / prod;
      }
      combinationIndex = {};
      indexes = [0, 0, 0, 0];
      a = 0;
      while (++a <= combCount) {
        combination = {
          armors: [null, null, null, null],
          weight: 0
        };
        log = [];
        log.push(a + " : " + join(',')(
        indexes));
        ciKey = "";
        for (i$ = 0, len$ = (ref$ = seq = [1, 3, 0, 2]).length; i$ < len$; ++i$) {
          key = i$;
          b = ref$[i$];
          if (combination.weight < this.freeWeight) {
            piece = groupOf[this.armorTypes[b]][indexes[b]];
            log.push(combination.weight + " < " + this.freeWeight + " => +" + indexes[b] + " (" + piece.name + ")");
            x$ = combination;
            x$.armors[b] = piece;
            x$.weight += piece.weight;
            ciKey += (piece.id > 0
              ? indexes[b]
              : piece.id) + ",";
          } else {
            if (combination.weight === this.freeWeight) {
              log.push(combination.weight + " == " + this.freeWeight + " => +" + empties[b].name);
              combination.armors[b] = empties[b];
              ciKey += empties[b].id + ",";
              if (key > 0) {
                split = splitAt[seq[key - 1]];
                jumpTo = a + (split - a % split);
                if (jumpTo !== a) {
                  log.push("Jumping to " + a + " + (" + split + " - " + a + " % " + split + ") = " + jumpTo);
                  a = jumpTo;
                }
              }
            }
          }
        }
        if (combination.weight <= this.freeWeight) {
          if (combinationIndex[ciKey] != null) {
            log.push("Combination [" + ciKey + "] already added, skipping");
          } else {
            log.push("Adding combination [" + ciKey + "] to list");
            combinationIndex[ciKey] = true;
            combinations.push(combination);
          }
          if (this._debugLog) {
            console.log(join("\n")(
            log));
          }
        }
        for (i$ = 0, len$ = (ref$ = [1, 3, 0, 2]).length; i$ < len$; ++i$) {
          b = ref$[i$];
          if (a % splitAt[b] === 0) {
            indexes[b] = (indexes[b] + 1) % lengths[b];
            break;
          }
        }
      }
      for (i$ = 0, len$ = combinations.length; i$ < len$; ++i$) {
        comb = combinations[i$];
        comb.names = map(fn1$)(
        comb.armors);
        comb.pieces = join(',')(
        map(fn2$)(
        comb.armors));
        comb.upgradeLevel = sum(
        map(fn3$)(
        comb.armors));
      }
      def.resolve(combinations);
      return def.promise;
      function fn$(it){
        return it.armorType === type && it.weight === 0;
      }
      function fn1$(it){
        return it != null ? it.name : void 8;
      }
      function fn2$(it){
        return this$._itemUpgradeSvc.getBaseIdFrom(it.id);
      }
      function fn3$(it){
        var ref$;
        return (ref$ = it.upgradeLevel) != null ? ref$ : 0;
      }
    };
    prototype.calculateScoreFor = function(combination, params){
      return average(
      map(function(it){
        return it.defPhy;
      })(
      combination.armors));
    };
    /**
     * Find all upgrades that can be applied to a given item,
     * within the limits
     */
    prototype.findAllAvailableUpgradesFor = function(armor){
      var x$, upgradeList, this$ = this;
      if (armor.id < 0 || armor.upgradeId < 0) {
        x$ = this.$q.defer();
        x$.resolve([]);
        return x$.promise;
      }
      upgradeList = [];
      return this._inventorySvc.load().then(function(inventory){
        var materials, promise, i$, level;
        materials = map(function(it){
          return import$({}, it);
        })(
        filter(function(it){
          return it.itemType === 'item';
        })(
        inventory));
        promise = this$.$q(function(resolve, reject){
          resolve();
        });
        for (i$ = this$._itemUpgradeSvc.getUpgradeLevelFrom(armor.id) + 1; i$ <= 10; ++i$) {
          level = i$;
          fn$(materials, level);
        }
        return promise;
        function fn$(materials, level){
          promise = promise.then(function(){
            return this$._itemUpgradeSvc.are(materials).enoughToUpgrade(armor, level);
          }).then(function(canUpgrade){
            if (canUpgrade) {
              return this$.$q.all([this$._itemSvc.getUpgraded(armor, level), this$._itemUpgradeSvc.deductFrom(materials).costOfUpgrade(armor, level)]);
            } else {
              materials.length = 0;
              return null;
            }
          }).then(function(result){
            var upArmor, cost, totalCost, costEntry, x$;
            upArmor = result != null ? result[0] : void 8;
            cost = result != null ? result[1] : void 8;
            if (upArmor != null) {
              totalCost = materials.totalCost || (materials.totalCost = []);
              costEntry = find(function(it){
                return it.matId === cost.matId;
              })(
              totalCost);
              if (costEntry == null) {
                costEntry = {
                  matId: cost.matId,
                  matCost: 0
                };
                totalCost.push(costEntry);
              }
              costEntry.matCost += cost.matCost;
              x$ = upArmor;
              x$.totalCost = map(function(it){
                return import$({}, it);
              })(
              totalCost);
              x$.upgradeLevel = level - this$._itemUpgradeSvc.getUpgradeLevelFrom(armor.id);
              upgradeList.push(upArmor);
            }
          });
        }
      }).then(function(){
        return upgradeList;
      });
    };
    return ArmorCalcSvc;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ArmorCalcSvc;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{}],14:[function(require,module,exports){
(function(){
  if (typeof module != 'undefined' && module !== null) {
    module.exports = function(uiGridConstants){
      var percentFieldMinWidth;
      percentFieldMinWidth = 45;
      return {
        columnDefs: [
          {
            field: 'score',
            width: 75,
            cellFilter: 'number:2',
            sort: {
              direction: uiGridConstants.DESC,
              priority: 0
            },
            type: 'number'
          }, {
            field: 'weight',
            width: 50,
            cellFilter: 'number:2',
            type: 'number',
            sort: {
              direction: uiGridConstants.ASC,
              priority: 1
            }
          }, {
            field: 'armors'
          }
        ]
      };
    };
  }
}).call(this);

},{}],15:[function(require,module,exports){
(function(){
  angular.module("dsc");
  require('./armor-calc-service');
  require('./armor-calc-controller');
}).call(this);

},{"./armor-calc-controller":12,"./armor-calc-service":13}],16:[function(require,module,exports){
(function(){
  angular.module("dsc").controller("GuideController", function($sce, $scope, $routeParams, $resource, guideService, storageSvc){
    var _getArrowFor, _prepareGuideContent, _saveUserData, _loadUserData, data;
    $scope.sections = [
      {
        id: 'intro',
        name: "Intro"
      }, {
        id: 'asylum',
        name: "Northern Undead Asylum"
      }, {
        id: 'firelink',
        name: "Firelink Shrine"
      }, {
        id: 'burg',
        name: "Undead Burg"
      }, {
        id: 'parish',
        name: "Undead Parish"
      }, {
        id: 'low',
        name: "Lower Undead Burg"
      }, {
        id: 'depths',
        name: "The Depths"
      }, {
        id: 'blight',
        name: "Blighttown"
      }
    ];
    $scope.section = $routeParams['section'];
    $scope.userData = null;
    $scope.entryIndex = {};
    _getArrowFor = function(entry){
      if (!(entry.meta || (entry.meta = {})).isExpandable) {
        return '';
      }
      return (entry.meta || (entry.meta = {})).isCollapsed ? '[..]' : '';
    };
    _prepareGuideContent = function(entry){
      var userMeta, ref$, ref1$, x$, i$, len$, check, child;
      if (entry.id != null) {
        $scope.entryIndex[entry.id] = entry;
      }
      if (entry.content != null) {
        entry.content = $sce.trustAsHtml(entry.content);
      }
      userMeta = (ref$ = ((ref1$ = $scope.userData || ($scope.userData = {})).entryMeta || (ref1$.entryMeta = {}))[entry.id]) != null
        ? ref$
        : {};
      x$ = entry.meta || (entry.meta = {});
      x$.isCollapsed = (ref$ = userMeta.isCollapsed) != null
        ? ref$
        : entry.content != null;
      x$.isDone = (ref$ = userMeta.isDone) != null ? ref$ : false;
      x$.isExpandable = entry.children != null || entry.content != null;
      x$.arrow = _getArrowFor(entry);
      for (i$ = 0, len$ = (ref$ = ['content', 'children']).length; i$ < len$; ++i$) {
        check = ref$[i$];
        ((ref1$ = entry.meta || (entry.meta = {})).additionalClasses || (ref1$.additionalClasses = [])).push(entry[check] != null
          ? "with-" + check
          : "without-" + check);
      }
      if (entry.children != null) {
        for (i$ = 0, len$ = (ref$ = entry.children).length; i$ < len$; ++i$) {
          child = ref$[i$];
          _prepareGuideContent(child);
        }
      }
    };
    _saveUserData = function(){
      var id, ref$, entry, i$, ref1$, len$, field, ref2$, ref3$;
      for (id in ref$ = $scope.entryIndex) {
        entry = ref$[id];
        for (i$ = 0, len$ = (ref1$ = ['isCollapsed', 'isDone']).length; i$ < len$; ++i$) {
          field = ref1$[i$];
          ((ref2$ = (ref3$ = $scope.userData || ($scope.userData = {})).entryMeta || (ref3$.entryMeta = {}))[id] || (ref2$[id] = {}))[field] = entry.meta[field];
        }
      }
      storageSvc.save('guide:userData', $scope.userData);
    };
    _loadUserData = function(){
      var ref$;
      $scope.userData = (ref$ = storageSvc.load('guide:userData')) != null
        ? ref$
        : {};
    };
    _loadUserData();
    data = guideService.getContentFor($scope.section);
    $scope.entry = {
      children: data
    };
    data.$promise.then(function(){
      _prepareGuideContent($scope.entry);
    });
    $scope.canAddToInventory = function(entry){
      var can;
      can = any((function(it){
        return it === 'item';
      }))(
      entry.labels || (entry.labels = []));
      can = can && !any((function(it){
        return it === 'abstract';
      }))(
      entry.flags || (entry.flags = []));
      return can;
    };
    $scope.entryClicked = function($event, entry){
      var x$;
      $event.stopPropagation();
      if (!(entry.meta || (entry.meta = {})).isExpandable) {
        return;
      }
      x$ = entry.meta || (entry.meta = {});
      x$.isCollapsed = !(entry.meta || (entry.meta = {})).isCollapsed;
      x$.arrow = _getArrowFor(entry);
      _saveUserData();
    };
    $scope.entryDone = function(entry){
      entry.meta.isDone = true;
      _saveUserData();
    };
  });
}).call(this);

},{}],17:[function(require,module,exports){
(function(){
  angular.module("dsc").service("guideService", function($resource){
    var svc;
    svc = {};
    svc.getContentFor = function(section){
      return $resource("/modules/guide/content/" + section + ".json").query();
    };
    return svc;
  });
}).call(this);

},{}],18:[function(require,module,exports){
(function(){
  require('./guide-controller');
  require('./guide-service');
}).call(this);

},{"./guide-controller":16,"./guide-service":17}],19:[function(require,module,exports){
(function(){
  if (typeof module != 'undefined' && module !== null) {
    module.exports = function(uiGridConstants){
      return {
        enableFiltering: true,
        columnDefs: [
          {
            field: 'name',
            sort: {
              direction: uiGridConstants.ASC
            }
          }, {
            field: 'itemType',
            displayName: 'Type',
            filter: {
              type: uiGridConstants.filter.SELECT,
              selectOptions: [
                {
                  value: 'weapon',
                  label: "Weapons"
                }, {
                  value: 'armor',
                  label: "Armor"
                }, {
                  value: 'item',
                  label: "Items"
                }
              ]
            }
          }, {
            field: 'amount',
            width: 50
          }
        ],
        onRegisterApi: function(gridApi){
          gridApi.core.addRowHeaderColumn({
            name: 'rowHeaderCol',
            displayName: '',
            width: 100,
            cellTemplate: 'GridRowHeader.html'
          });
        }
      };
    };
  }
}).call(this);

},{}],20:[function(require,module,exports){
(function(){
  angular.module("dsc").controller("InventoryController", function($scope, uiGridConstants, itemSvc, itemIndexSvc, itemUpgradeSvc, storageSvc, inventorySvc, dataExportSvc){
    $scope.selectedItem = null;
    $scope.armorSets = [];
    $scope.allItems = [];
    $scope.itemTypes = ['weapon', 'armor', 'item'];
    $scope.gridOptions = require('./config/inventory-grid-opts')(uiGridConstants);
    $scope.allItems = itemIndexSvc.loadAllEntries(false);
    $scope.armorSets = itemIndexSvc.loadAllArmorSetEntries(false);
    $scope.gridOptions.data = inventorySvc.load(false);
    $scope['export'] = function(){};
    $scope.canUpgrade = function(item){
      return itemUpgradeSvc.canBeUpgraded(
      item);
    };
    $scope.upgrade = function(invEntry){
      return itemSvc.findAnyItem(function(it){
        return it.uid === invEntry.uid;
      }).then(function(item){
        return itemSvc.getUpgraded(item);
      }).then(function(upItem){
        if (upItem == null) {
          return;
        }
        $scope.remove(invEntry);
        $scope.add(upItem);
      });
    };
    $scope.addNewItem = function(selection){
      $scope.add(selection.originalObject);
    };
    $scope.add = inventorySvc.add;
    $scope.remove = inventorySvc.remove;
    $scope.addArmorSet = function(selection){
      var armorSet;
      armorSet = selection.originalObject;
      itemIndexSvc.findByArmorSet(armorSet).then(function(armors){
        each($scope.add)(
        armors);
      });
    };
  });
}).call(this);

},{"./config/inventory-grid-opts":19}],21:[function(require,module,exports){
(function(){
  var InventorySvc;
  if (typeof angular != 'undefined' && angular !== null) {
    angular.module("dsc").service("inventorySvc", function(storageSvc, itemIndexSvc, $q){
      return new InventorySvc(storageSvc, itemIndexSvc, $q);
    });
  }
  InventorySvc = (function(){
    InventorySvc.displayName = 'InventorySvc';
    var prototype = InventorySvc.prototype, constructor = InventorySvc;
    function InventorySvc(storageSvc, itemIndexSvc, $q){
      this.storageSvc = storageSvc;
      this.itemIndexSvc = itemIndexSvc;
      this.$q = $q;
      this.clear = bind$(this, 'clear', prototype);
      this.remove = bind$(this, 'remove', prototype);
      this.add = bind$(this, 'add', prototype);
      this.createInventoryItemFrom = bind$(this, 'createInventoryItemFrom', prototype);
      this.find = bind$(this, 'find', prototype);
      this.findItemByUid = bind$(this, 'findItemByUid', prototype);
      this.load = bind$(this, 'load', prototype);
      this.save = bind$(this, 'save', prototype);
      this._inventory = [];
      this._models = require('./models/inventory-models');
    }
    prototype.save = function(){
      var data, i$, ref$, len$, item;
      data = [];
      for (i$ = 0, len$ = (ref$ = this._inventory).length; i$ < len$; ++i$) {
        item = ref$[i$];
        data.push({
          'uid': item.uid,
          'amount': item.amount
        });
      }
      this.storageSvc.save('inventory', data);
    };
    prototype.load = function(returnPromise){
      var promises, i$, ref$, len$, data, promise, this$ = this;
      returnPromise == null && (returnPromise = true);
      if (this._inventory.$promise == null) {
        this.clear();
        promises = [];
        for (i$ = 0, len$ = (ref$ = this.storageSvc.load('inventory')).length; i$ < len$; ++i$) {
          data = ref$[i$];
          promise = fn$(data);
          promises.push(promise);
        }
        this._inventory.$promise = this.$q.all(promises).then(function(){
          return this$._inventory;
        });
      }
      return returnPromise
        ? this._inventory.$promise
        : this._inventory;
      function fn$(data){
        var item;
        item = new this$._models.InventoryItem(data);
        return this$.itemIndexSvc.findEntry(function(it){
          return it.uid === data.uid;
        }).then(function(indexEntry){
          item.useDataFrom(indexEntry);
          this$._inventory.push(item);
          return item;
        });
      }
    };
    prototype.findItemByUid = function(uid){
      var this$ = this;
      return this.load().then(function(inventory){
        return find(function(it){
          return it.uid === uid;
        })(
        inventory);
      });
    };
    prototype.find = function(item){
      if (item.uid == null) {
        throw new Error("Can't find an item without UID.");
      }
      return this.findItemByUid(item.uid);
    };
    prototype.createInventoryItemFrom = function(item, amount){
      var x$;
      amount == null && (amount = 1);
      x$ = new this._models.InventoryItem;
      x$.useDataFrom(item);
      x$.amount = amount;
      return x$;
    };
    prototype.add = function(item, amount){
      var this$ = this;
      amount == null && (amount = 1);
      return this.find(item).then(function(invItem){
        var x$;
        if (invItem != null) {
          invItem.amount += amount;
        } else {
          x$ = invItem = this$.createInventoryItemFrom(item, amount);
          this$._inventory.push(
          x$);
        }
        this$.save();
        return invItem;
      });
    };
    prototype.remove = function(item, amount){
      var this$ = this;
      amount == null && (amount = 1);
      return this.find(item).then(function(entry){
        if (entry == null) {
          throw new Error("Failed to remove the above item because couldn't find it in the inventory.");
        }
        entry.amount = amount === true
          ? 0
          : entry.amount -= amount;
        if (entry.amount < 1) {
          this$._inventory.splice(this$._inventory.indexOf(entry), 1);
        }
        this$.save();
        return entry;
      });
    };
    prototype.clear = function(){
      this._inventory.length = 0;
      delete this._inventory.$promise;
      return this;
    };
    return InventorySvc;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = InventorySvc;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./models/inventory-models":23}],22:[function(require,module,exports){
(function(){
  angular.module("dsc");
  require("./inventory-controller");
  require("./inventory-service");
}).call(this);

},{"./inventory-controller":20,"./inventory-service":21}],23:[function(require,module,exports){
(function(){
  var InventoryItemModel;
  InventoryItemModel = (function(){
    InventoryItemModel.displayName = 'InventoryItemModel';
    var prototype = InventoryItemModel.prototype, constructor = InventoryItemModel;
    function InventoryItemModel(item){
      this.useDataFrom = bind$(this, 'useDataFrom', prototype);
      this.amount = 1;
      this.name = '';
      this.itemType = '';
      this.id = '';
      this.uid = '';
      this.useDataFrom(item);
    }
    prototype.useDataFrom = function(item){
      var i$, ref$, len$, field;
      if (item == null) {
        return;
      }
      for (i$ = 0, len$ = (ref$ = ['amount', 'uid', 'name', 'itemType', 'id']).length; i$ < len$; ++i$) {
        field = ref$[i$];
        if (item[field] != null) {
          this[field] = item[field];
        }
      }
      return this;
    };
    return InventoryItemModel;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = {
      'InventoryItem': InventoryItemModel
    };
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{}],24:[function(require,module,exports){
(function(){
  if (typeof module != 'undefined' && module !== null) {
    module.exports = function($scope, uiGridConstants){
      var percentFieldMinWidth, i$, ref$, len$, itemType;
      $scope.gridOptions = {};
      percentFieldMinWidth = 45;
      $scope.columnConfigs = {
        'weapons': [
          {
            field: 'weaponCategory',
            displayName: 'Type',
            minWidth: 70,
            sort: {
              direction: uiGridConstants.ASC,
              priority: 0
            }
          }, {
            field: 'name',
            minWidth: 210,
            sort: {
              direction: uiGridConstants.ASC,
              priority: 1
            }
          }, {
            field: 'reqS',
            displayName: 'RS',
            type: 'number'
          }, {
            field: 'reqD',
            displayName: 'RD'
          }, {
            field: 'reqI',
            displayName: 'RI'
          }, {
            field: 'reqF',
            displayName: 'RF'
          }, {
            field: 'dmgN',
            displayName: 'AP'
          }, {
            field: 'dmgM',
            displayName: 'AM'
          }, {
            field: 'dmgF',
            displayName: 'AF'
          }, {
            field: 'dmgL',
            displayName: 'AL'
          }, {
            field: 'dmgS',
            displayName: 'AS'
          }, {
            field: 'scS',
            displayName: 'SS',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage'
          }, {
            field: 'scD',
            displayName: 'SD',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage'
          }, {
            field: 'scI',
            displayName: 'SI',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage'
          }, {
            field: 'scF',
            displayName: 'SF',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage'
          }, {
            field: 'defN',
            displayName: 'DP'
          }, {
            field: 'defM',
            displayName: 'DM'
          }, {
            field: 'defF',
            displayName: 'DF'
          }, {
            field: 'defL',
            displayName: 'DL'
          }, {
            field: 'defT',
            displayName: 'DT'
          }, {
            field: 'defB',
            displayName: 'DB'
          }, {
            field: 'defC',
            displayName: 'DC'
          }, {
            field: 'defS',
            displayName: 'St'
          }, {
            field: 'divMod',
            minWidth: percentFieldMinWidth,
            displayName: 'Div',
            cellFilter: 'percentage'
          }, {
            field: 'occMod',
            minWidth: percentFieldMinWidth,
            displayName: 'Occ',
            cellFilter: 'percentage'
          }
        ],
        'armors': [
          {
            name: 'armorSet',
            displayName: 'Set',
            minWidth: 150,
            sort: {
              direction: uiGridConstants.ASC,
              priority: 0
            }
          }, {
            name: 'armorType',
            displayName: 'Type',
            sort: {
              direction: uiGridConstants.ASC,
              priority: 1
            },
            sortingAlgorithm: function(a, b){
              var values;
              values = {
                'head': 1,
                'chest': 2,
                'hands': 3,
                'legs': 4
              };
              return values[a] > values[b]
                ? 1
                : values[a] < values[b] ? -1 : 0;
            }
          }, {
            field: 'name',
            minWidth: 250
          }, {
            name: 'defN',
            type: 'number',
            displayName: 'DN'
          }, {
            name: 'defSl',
            type: 'number',
            displayName: 'DSl'
          }, {
            name: 'defSt',
            type: 'number',
            displayName: 'DSt'
          }, {
            name: 'defTh',
            type: 'number',
            displayName: 'DTh'
          }, {
            name: 'defM',
            type: 'number',
            displayName: 'DM'
          }, {
            name: 'defF',
            type: 'number',
            displayName: 'DF'
          }, {
            name: 'defL',
            type: 'number',
            displayName: 'DL'
          }, {
            name: 'defP',
            type: 'number',
            displayName: 'DP'
          }, {
            name: 'defT',
            type: 'number',
            displayName: 'RP'
          }, {
            name: 'defB',
            type: 'number',
            displayName: 'RB'
          }, {
            name: 'defC',
            type: 'number',
            displayName: 'RC'
          }, {
            name: 'stRec',
            type: 'number',
            displayName: 'Sr'
          }, {
            name: 'weight',
            type: 'number',
            displayName: 'Wt'
          }
        ]
      };
      for (i$ = 0, len$ = (ref$ = ['items', 'keys', 'materials', 'rings']).length; i$ < len$; ++i$) {
        itemType = ref$[i$];
        $scope.columnConfigs[itemType] = [{
          field: 'name',
          sort: {
            direction: uiGridConstants.ASC,
            priority: 0
          }
        }];
      }
    };
  }
}).call(this);

},{}],25:[function(require,module,exports){
(function(){
  var ItemIndexService;
  if (typeof angular != 'undefined' && angular !== null) {
    angular.module("dsc").service("itemIndexSvc", function(externalDataSvc){
      return new ItemIndexService(externalDataSvc);
    });
  }
  ItemIndexService = (function(){
    ItemIndexService.displayName = 'ItemIndexService';
    var prototype = ItemIndexService.prototype, constructor = ItemIndexService;
    function ItemIndexService(externalDataSvc){
      this.externalDataSvc = externalDataSvc;
      this.loadAllEntries = bind$(this, 'loadAllEntries', prototype);
      this.loadAllArmorSetEntries = bind$(this, 'loadAllArmorSetEntries', prototype);
      this.findByArmorSet = bind$(this, 'findByArmorSet', prototype);
      this.findArmorSetFor = bind$(this, 'findArmorSetFor', prototype);
      this.findEntries = bind$(this, 'findEntries', prototype);
      this.findEntry = bind$(this, 'findEntry', prototype);
      this.clear = bind$(this, 'clear', prototype);
      this._index = [];
      this._armorSetIndex = [];
    }
    prototype.clear = function(){
      this._index.length = 0;
      delete this._index.$promise;
      this._armorSetIndex.length = 0;
      delete this._armorSetIndex.$promise;
      return this;
    };
    /**
     * Finds the first item matching a given filter.
     * @param byFilter Function filter function that takes item as
     * a parameter and returns true/false if it matches/doesn't.
     * @returns Promise that resolves with the found value.
     */
    prototype.findEntry = function(byFilter){
      var this$ = this;
      if (typeof byFilter !== 'function') {
        throw new Error("[byFilter] is not a function.");
      }
      return this.loadAllEntries().then(function(it){
        return find(byFilter)(
        it);
      });
    };
    prototype.findEntries = function(byFilter){
      var this$ = this;
      if (typeof byFilter !== 'function') {
        throw new Error("[byFilter] is not a function.");
      }
      return this.loadAllEntries().then(function(it){
        return filter(byFilter)(
        it);
      });
    };
    prototype.findArmorSetFor = function(item){
      var this$ = this;
      return this.loadAllArmorSetEntries().then(function(it){
        return find(function(it){
          return it.uid === item.uid;
        })(
        it);
      });
    };
    prototype.findByArmorSet = function(setName){
      var this$ = this;
      if (typeof setName === 'object') {
        setName = setName.name;
      }
      if (typeof setName !== 'string') {
        throw new Error("Armor set name must be a string, or an object with string property [name].");
      }
      return this.loadAllArmorSetEntries().then(function(sets){
        var armorIds, ref$;
        armorIds = (ref$ = find(function(it){
          return it.name === setName;
        })(
        sets)) != null ? ref$.armors : void 8;
        return this$.findEntries(function(entry){
          return any((function(it){
            return it === entry.id;
          }))(
          armorIds);
        });
      });
    };
    prototype.loadAllArmorSetEntries = function(returnPromise){
      returnPromise == null && (returnPromise = true);
      if (this._armorSetIndex.$promise == null) {
        this._armorSetIndex = this.externalDataSvc.loadJson('/modules/items/content/armor-set-index.json', false);
      }
      return returnPromise
        ? this._armorSetIndex.$promise
        : this._armorSetIndex;
    };
    prototype.loadAllEntries = function(returnPromise){
      returnPromise == null && (returnPromise = true);
      if (this._index.$promise == null) {
        this._index = this.externalDataSvc.loadJson('/modules/items/content/index.json', false);
      }
      return returnPromise
        ? this._index.$promise
        : this._index;
    };
    return ItemIndexService;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ItemIndexService;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{}],26:[function(require,module,exports){
(function(){
  var ItemService;
  if (typeof angular != 'undefined' && angular !== null) {
    angular.module("dsc").service("itemSvc", function(externalDataSvc, itemIndexSvc, itemUpgradeSvc){
      return new ItemService(externalDataSvc, itemIndexSvc, itemUpgradeSvc);
    });
  }
  ItemService = (function(){
    ItemService.displayName = 'ItemService';
    var prototype = ItemService.prototype, constructor = ItemService;
    function ItemService(_externalDataSvc, _itemIndexSvc, _itemUpgradeSvc){
      this._externalDataSvc = _externalDataSvc;
      this._itemIndexSvc = _itemIndexSvc;
      this._itemUpgradeSvc = _itemUpgradeSvc;
      this.getUpgraded = bind$(this, 'getUpgraded', prototype);
      this.loadAllItems = bind$(this, 'loadAllItems', prototype);
      this.createItemModel = bind$(this, 'createItemModel', prototype);
      this.findAnyItem = bind$(this, 'findAnyItem', prototype);
      this.findBaseItem = bind$(this, 'findBaseItem', prototype);
      this.findItem = bind$(this, 'findItem', prototype);
      this.clear = bind$(this, 'clear', prototype);
      this._storage = {};
      this._models = require('./models/item-models');
    }
    prototype.clear = function(){
      this._storage = {};
    };
    /**
     * Return the first item matching a given filter
     * @param itemType String type of item to find.
     * @param filterFn Function Filter function
     * @return Promise that resolves with the found item, or null if nothing found.
     */
    prototype.findItem = function(itemType, filterFn){
      var this$ = this;
      if (typeof itemType !== 'string') {
        throw new Error("Item type is invalid or not provided");
      }
      return this.loadAllItems(itemType).then(function(items){
        var item;
        item = find(filterFn)(
        items);
        return item;
      });
    };
    prototype.findBaseItem = function(item){
      var this$ = this;
      return this.findItem(item.itemType, function(it){
        return it.id === this$._itemUpgradeSvc.getBaseIdFrom(item.id);
      });
    };
    /**
     * Finds any item, regardless of type, but can only
     * check fields that are in the index.
     */
    prototype.findAnyItem = function(filterFn){
      var this$ = this;
      return this._itemIndexSvc.findEntry(filterFn).then(function(item){
        var baseId, upLevel;
        if (this$._itemUpgradeSvc.isUpgraded(item)) {
          baseId = this$._itemUpgradeSvc.getBaseIdFrom(item.id);
          upLevel = this$._itemUpgradeSvc.getUpgradeLevelFrom(item.id);
          return function(item, baseId, upLevel){
            return this$.findItem(item.itemType, function(it){
              return it.id === baseId;
            }).then(function(baseItem){
              return this$.getUpgraded(baseItem, upLevel);
            });
          }(item, baseId, upLevel);
        } else {
          return this$.findItem(item.itemType, function(it){
            return it.id === item.id;
          });
        }
      });
    };
    /**
     * Create a model from given item data
     */
    prototype.createItemModel = function(data){
      return (function(){
        switch (data.itemType) {
        case 'weapon':
          return new this._models.Weapon;
        case 'armor':
          return new this._models.Armor;
        case 'item':
          return new this._models.Item;
        default:
          throw new Error("[" + data.itemType + "] is not a recognized item type.");
        }
      }.call(this)).useDataFrom(data);
    };
    /**
     * Load item data of a given item type.
     * @returns Promise or populated array, depending on returnPromise setting.
     */
    prototype.loadAllItems = function(itemType, returnPromise){
      var ref$, test, this$ = this;
      returnPromise == null && (returnPromise = true);
      if (((ref$ = this._storage)[itemType] || (ref$[itemType] = [])).$promise == null) {
        this._storage[itemType].$promise = test = this._externalDataSvc.loadJson("/modules/items/content/" + itemType + "s.json").then(function(itemData){
          each(function(it){
            var ref$;
            ((ref$ = this$._storage)[itemType] || (ref$[itemType] = [])).push(this$.createItemModel(it));
          })(
          itemData);
          return this$._storage[itemType];
        });
      }
      return returnPromise
        ? this._storage[itemType].$promise
        : this._storage[itemType];
    };
    prototype.getUpgraded = function(item, level){
      var this$ = this;
      level == null && (level = true);
      if (level === true) {
        level = item.upgradeId + 1;
      }
      return this._itemUpgradeSvc.findUpgradeFor(item, level).then(function(upgrade){
        if (upgrade == null) {
          return null;
        }
        return this$.findBaseItem(
        item).then(function(baseItem){
          return this$.createItemModel(baseItem);
        }).then(function(newItem){
          return this$._itemUpgradeSvc.apply(upgrade).to(newItem);
        }).then(function(newItem){
          return this$._itemIndexSvc.findEntry(function(it){
            return it.uid === newItem.uid;
          }).then(function(entry){
            newItem.name = entry.name;
            return newItem;
          });
        }).then(function(newItem){
          if (newItem.itemType === 'armor') {
            newItem.armorSet = this$._itemIndexSvc.findArmorSetFor(newItem).name;
          }
          return newItem;
        });
      });
    };
    return ItemService;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ItemService;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./models/item-models":30}],27:[function(require,module,exports){
(function(){
  var ItemUpgradeService;
  if (typeof angular != 'undefined' && angular !== null) {
    angular.module("dsc").service("itemUpgradeSvc", function(externalDataSvc){
      return new ItemUpgradeService(externalDataSvc);
    });
  }
  ItemUpgradeService = (function(){
    ItemUpgradeService.displayName = 'ItemUpgradeService';
    var prototype = ItemUpgradeService.prototype, constructor = ItemUpgradeService;
    function ItemUpgradeService(externalDataSvc){
      this.externalDataSvc = externalDataSvc;
      this.apply = bind$(this, 'apply', prototype);
      this.canBeUpgradedFurther = bind$(this, 'canBeUpgradedFurther', prototype);
      this.canBeUpgraded = bind$(this, 'canBeUpgraded', prototype);
      this.isUpgraded = bind$(this, 'isUpgraded', prototype);
      this.upgradeLevelOf = bind$(this, 'upgradeLevelOf', prototype);
      this.ensureItCanBeUpgraded = bind$(this, 'ensureItCanBeUpgraded', prototype);
      this.loadAllUpgrades = bind$(this, 'loadAllUpgrades', prototype);
      this.loadAllMaterialSets = bind$(this, 'loadAllMaterialSets', prototype);
      this.deductFrom = bind$(this, 'deductFrom', prototype);
      this.are = bind$(this, 'are', prototype);
      this.findUpgradeMaterialsFor = bind$(this, 'findUpgradeMaterialsFor', prototype);
      this.findUpgradeFor = bind$(this, 'findUpgradeFor', prototype);
      this.getBaseItemIdOf = bind$(this, 'getBaseItemIdOf', prototype);
      this.getUpgradeLevelFrom = bind$(this, 'getUpgradeLevelFrom', prototype);
      this.getBaseIdFrom = bind$(this, 'getBaseIdFrom', prototype);
      this._upgrades = {};
      this._materialSets = [];
    }
    prototype.getBaseIdFrom = function(id){
      return id - this.getUpgradeLevelFrom(id);
    };
    prototype.getUpgradeLevelFrom = function(id){
      return id % 100;
    };
    prototype.getBaseItemIdOf = function(item){
      return this.getBaseIdFrom(item.id);
    };
    /**
     * Get the upgrade model for a given weapon at a given upgrade level
     * @returns Promise, resolved with the upgrade (or null if nothing found)
     */
    prototype.findUpgradeFor = function(item, level){
      var this$ = this;
      return this.loadAllUpgrades(item.itemType).then(function(upgrades){
        return find(function(it){
          return it.id === this$.getBaseIdFrom(item.upgradeId) + level;
        })(
        upgrades);
      });
    };
    /**
     * Find the materials required to upgrade a given item using a given upgrade model.
     * @returns Promise that is resolved with the material data.
     */
    prototype.findUpgradeMaterialsFor = function(item, upgrade){
      var x$, this$ = this;
      if (!(item != null && upgrade != null)) {
        throw new Error("Can't find upgrade materials, either item or upgrade is unset.");
      }
      if (item.matSetId < 0) {
        x$ = $q.defer();
        x$.resolve(null);
        return x$.promise;
      }
      return this.loadAllMaterialSets().then(function(){
        return find(function(it){
          return it.id === this$.getBaseIdFrom(item.matSetId) + upgrade.matSetId;
        })(
        this$._materialSets);
      });
    };
    prototype.are = function(materials){
      var this$ = this;
      return {
        enoughToUpgrade: function(item, level){
          return this$.findUpgradeFor(item, level).then(function(upgrade){
            if (upgrade == null) {
              return false;
            }
            return this$.findUpgradeMaterialsFor(item, upgrade);
          }).then(function(materialSet){
            if (materialSet === false) {
              return null;
            }
            return any(function(it){
              return it.id === materialSet.matId && it.amount >= materialSet.matCost;
            })(
            materials);
          });
        }
      };
    };
    prototype.deductFrom = function(materials){
      var this$ = this;
      return {
        costOfUpgrade: function(item, level){
          return this$.findUpgradeFor(item, level).then(function(upgrade){
            return this$.findUpgradeMaterialsFor(item, upgrade);
          }).then(function(materialSet){
            find(function(it){
              return it.id === materialSet.matId;
            })(
            materials).amount -= materialSet.matCost;
            return {
              matCost: materialSet.matCost,
              matId: materialSet.matId
            };
          });
        }
      };
    };
    /**
     * Asynchronously loads all information on material sets required for upgrades
     * @returns Promise that will be resolved with the material set data.
     */
    prototype.loadAllMaterialSets = function(){
      if (this._materialSets.$promise == null) {
        this._materialSets = this.externalDataSvc.loadJson("/modules/items/content/material-sets.json", false);
      }
      return this._materialSets.$promise;
    };
    /**
     * Load information on all upgrades for a given item type
     * @returns Promise resolved with the upgrade data
     */
    prototype.loadAllUpgrades = function(itemType){
      var ref$;
      this.ensureItCanBeUpgraded(
      itemType);
      if (((ref$ = this._upgrades)[itemType] || (ref$[itemType] = [])).$promise == null) {
        this._upgrades[itemType] = this.externalDataSvc.loadJson("/modules/items/content/" + itemType + "-upgrades.json", false);
      }
      return this._upgrades[itemType].$promise;
    };
    prototype.ensureItCanBeUpgraded = function(item){
      if (item == null) {
        throw new Error("Item / item type not provided.");
      }
      if (typeof item === 'string') {
        item = {
          itemType: item
        };
      }
      if (!this.canBeUpgraded(
      item)) {
        throw new Error("Only weapons and armors can be upgraded, this is a [" + item.itemType + "].");
      }
    };
    prototype.upgradeLevelOf = function(item){
      return item.id % 100;
    };
    prototype.isUpgraded = function(item){
      return this.upgradeLevelOf(item) > 0;
    };
    prototype.canBeUpgraded = function(item){
      return item.itemType === 'weapon' || item.itemType === 'armor';
    };
    prototype.canBeUpgradedFurther = function(item){
      var this$ = this;
      if (!this.canBeUpgraded(item)) {
        return false;
      }
      return this.findUpgradeFor(item, this.upgradeLevelOf(item)).then(function(upgrade){
        return upgrade != null;
      });
    };
    prototype.apply = function(upgrade){
      var this$ = this;
      if (upgrade == null) {
        throw new Error("No upgrade data provided.");
      }
      return {
        to: function(item){
          var x$, i$, ref$, len$, field;
          this$.ensureItCanBeUpgraded(
          item);
          x$ = item;
          x$.id += upgrade['id'] % 100;
          x$.upgradeId = upgrade['id'];
          x$.matSetId += upgrade['matSetId'];
          for (i$ = 0, len$ = (ref$ = ['defModPhy', 'defModMag', 'defModFir', 'defModLit', 'defModTox', 'defModBlo', 'defModCur']).length; i$ < len$; ++i$) {
            field = ref$[i$];
            item[field.replace('Mod', '')] *= upgrade[field];
          }
          switch (item['itemType']) {
          case 'weapon':
            for (i$ = 0, len$ = (ref$ = ['atkModPhy', 'atkModMag', 'atkModFir', 'atkModLit', 'bonusModStr', 'bonusModDex', 'bonusModInt', 'bonusModFai']).length; i$ < len$; ++i$) {
              field = ref$[i$];
              item[field.replace('Mod', '')] *= upgrade[field];
            }
            break;
          case 'armor':
            for (i$ = 0, len$ = (ref$ = ['defModStrike', 'defModSlash', 'defModThrust']).length; i$ < len$; ++i$) {
              field = ref$[i$];
              item[field.replace('Mod', '')] *= upgrade[field];
            }
          }
          return item;
        }
      };
    };
    return ItemUpgradeService;
  }());
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ItemUpgradeService;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{}],28:[function(require,module,exports){
(function(){
  angular.module("dsc").controller("ItemsController", function($scope, dataExportSvc, itemSvc, uiGridConstants){
    var i$, ref$, len$, itemType;
    $scope.itemTypes = [];
    for (i$ = 0, len$ = (ref$ = ['none', 'items', 'weapons', 'armors']).length; i$ < len$; ++i$) {
      itemType = ref$[i$];
      $scope.itemTypes.push(itemType);
    }
    require('./config/items-grid-options')($scope, uiGridConstants);
    $scope.selectedItemTypeChanged = function(){
      if ($scope.selectedItemType === 'none') {
        $scope.gridOptions.data = [];
        $scope.gridOptions.columnDefs = [];
        return;
      }
      itemSvc.loadItemData($scope.selectedItemType).$promise.then(function(itemData){
        var i$, len$, weapon;
        if ($scope.selectedItemType === 'weapons') {
          for (i$ = 0, len$ = itemData.length; i$ < len$; ++i$) {
            weapon = itemData[i$];
            itemSvc.applyUpgradeTo(weapon, 0);
          }
        }
        $scope.gridOptions.data = itemData;
      });
      $scope.gridOptions.columnDefs = $scope.columnConfigs[$scope.selectedItemType];
    };
    $scope.exportAsJson = function(){
      dataExportSvc.exportJson(map(function(it){
        delete it.$$hashKey;
        return it;
      })(
      $scope.gridOptions.data));
    };
    $scope.exportAsCsv = function(){
      var outputData;
      outputData = map(function(it){
        var item;
        item = import$({}, it);
        delete item.$$hashKey;
        return item;
      })(
      $scope.gridOptions.data);
      dataExportSvc.exportCsv(outputData);
    };
    $scope.selectedItemType = 'none';
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./config/items-grid-options":24}],29:[function(require,module,exports){
(function(){
  require('./items-controller');
  require('./item-service');
  require('./item-index-service');
  require('./item-upgrade-service');
}).call(this);

},{"./item-index-service":25,"./item-service":26,"./item-upgrade-service":27,"./items-controller":28}],30:[function(require,module,exports){
(function(){
  var ItemModel, EquipmentModel, WeaponModel, ArmorModel;
  if (typeof module != 'undefined' && module !== null) {
    module.exports = {
      'Item': ItemModel = (function(){
        ItemModel.displayName = 'ItemModel';
        var prototype = ItemModel.prototype, constructor = ItemModel;
        function ItemModel(){
          this.useDataFrom = bind$(this, 'useDataFrom', prototype);
          this.id = 0;
          this.itemType = 'item';
          this.itemSubtype = '';
          this.name = '';
          this.sellValue = 0;
          this.iconId = 0;
        }
        /**
         * A unique ID that doesn't overlap between item types.
         */
        Object.defineProperty(prototype, 'uid', {
          get: function(){
            return this.itemType + this.id;
          },
          configurable: true,
          enumerable: true
        });
        prototype.useDataFrom = function(itemData){
          return import$(this, itemData);
        };
        return ItemModel;
      }()),
      'Equipment': EquipmentModel = (function(superclass){
        var prototype = extend$((import$(EquipmentModel, superclass).displayName = 'EquipmentModel', EquipmentModel), superclass).prototype, constructor = EquipmentModel;
        function EquipmentModel(){
          EquipmentModel.superclass.call(this);
          this.weight = 0.0;
          this.durability = 0;
          this.defPhy = 0;
          this.defMag = 0;
          this.defFir = 0;
          this.defLit = 0;
          this.defTox = 0;
          this.defBlo = 0;
          this.defCur = 0;
          this.matSetId = 0;
          this.upgradeCost = 0;
          this.upgradeId = -1;
        }
        return EquipmentModel;
      }(ItemModel)),
      'Weapon': WeaponModel = (function(superclass){
        var prototype = extend$((import$(WeaponModel, superclass).displayName = 'WeaponModel', WeaponModel), superclass).prototype, constructor = WeaponModel;
        function WeaponModel(){
          WeaponModel.superclass.call(this);
          this.itemType = 'weapon';
          this.weaponType = '';
          this.weaponSubtype = '';
          this.path = '';
          this.canBlock = false;
          this.canParry = false;
          this.castsMagic = false;
          this.castsPyromancy = false;
          this.castsMiracles = false;
          this.damagesGhosts = false;
          this.isAugmentable = false;
          this.doesRegularDamage = false;
          this.doesStrikeDamage = false;
          this.doesSlashDamage = false;
          this.doesThrustDamage = false;
          this.reqStr = 0;
          this.reqDex = 0;
          this.reqInt = 0;
          this.reqFai = 0;
          this.atkPhy = 0;
          this.atkMag = 0;
          this.atkFir = 0;
          this.atkLit = 0;
          this.atkStaCost = 0;
          this.bonusStr = 0;
          this.bonusDex = 0;
          this.bonusInt = 0;
          this.bonusFai = 0;
          this.defSta = 0;
          this.divine = 0;
          this.occult = 0;
          this.range = 0;
          this.atkBlo = 0;
          this.dmgBlo = 0;
          this.atkTox = 0;
          this.dmgTox = 0;
          this.atkHeal = 0;
        }
        return WeaponModel;
      }(EquipmentModel)),
      'Armor': ArmorModel = (function(superclass){
        var prototype = extend$((import$(ArmorModel, superclass).displayName = 'ArmorModel', ArmorModel), superclass).prototype, constructor = ArmorModel;
        function ArmorModel(){
          ArmorModel.superclass.call(this);
          this.itemType = 'armor';
          this.armorType = '';
          this.armorSet = '';
          this.defSlash = 0;
          this.defStrike = 0;
          this.defThrust = 0;
          this.defPoise = 0;
          this.staRegenMod = 0;
        }
        Object.defineProperty(prototype, 'sortType', {
          get: function(){
            switch (this.armorType) {
            case 'head':
              return 1;
            case 'chest':
              return 2;
            case 'hands':
              return 3;
            case 'legs':
              return 4;
            }
          },
          configurable: true,
          enumerable: true
        });
        return ArmorModel;
      }(EquipmentModel))
    };
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
}).call(this);

},{}],31:[function(require,module,exports){
(function(){
  angular.module("dsc").controller("PcController", function($scope, pcService){
    $scope.model = pcService.loadUserData();
    $scope.saveStats = function(){
      pcService.saveUserData($scope.model);
    };
  });
}).call(this);

},{}],32:[function(require,module,exports){
(function(){
  angular.module("dsc").filter("toStatArray", function(pcService){
    var output;
    output = [];
    return function(model){
      if (output.length > 0) {
        return output;
      }
      pcService.forEachStat(model, function(stat, name){
        output.push(model[name]);
      });
      return output;
    };
  });
}).call(this);

},{}],33:[function(require,module,exports){
(function(){
  angular.module("dsc");
  require("./service");
  require("./controller");
  require("./controller/filters");
}).call(this);

},{"./controller":31,"./controller/filters":32,"./service":36}],34:[function(require,module,exports){
(function(){
  var PcModel;
  if (typeof module != 'undefined' && module !== null) {
    module.exports = PcModel = (function(){
      PcModel.displayName = 'PcModel';
      var prototype = PcModel.prototype, constructor = PcModel;
      PcModel.Stats = ['vitality', 'attunement', 'endurance', 'strength', 'dexterity', 'resistance', 'intelligence', 'faith', 'humanity'];
      function PcModel(pcService){
        this.pcService = pcService;
        this.validate = bind$(this, 'validate', prototype);
        this.forEachStat = bind$(this, 'forEachStat', prototype);
        this.forEachStat(function(stat, name){
          return new (require('./PcStatModel'))(name);
        });
      }
      prototype.forEachStat = function(func){
        this.pcService.forEachStat(this, func);
      };
      prototype.validate = function(){
        this.forEachStat(function(it){
          it.base = max(8, min(99, it.base));
        });
      };
      return PcModel;
    }());
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);

},{"./PcStatModel":35}],35:[function(require,module,exports){
(function(){
  var PcStatModel;
  if (typeof module != 'undefined' && module !== null) {
    module.exports = PcStatModel = (function(){
      PcStatModel.displayName = 'PcStatModel';
      var prototype = PcStatModel.prototype, constructor = PcStatModel;
      function PcStatModel(name, base){
        this.name = name;
        this.base = base != null ? base : 0;
        this.bonus = 0;
      }
      Object.defineProperty(prototype, 'total', {
        get: function(){
          return this.base + this.bonus;
        },
        configurable: true,
        enumerable: true
      });
      Object.defineProperty(prototype, 'displayName', {
        get: function(){
          return capitalize(this.name);
        },
        configurable: true,
        enumerable: true
      });
      return PcStatModel;
    }());
  }
}).call(this);

},{}],36:[function(require,module,exports){
(function(){
  angular.module("dsc").service('pcService', function(storageSvc){
    var x$, svc, this$ = this;
    x$ = svc = {};
    x$.data = {};
    x$.PcModel = require('./models/PcModel');
    x$.PcStatModel = require('./models/PcStatModel');
    svc.statValueOf = function(name){
      svc.loadUserData();
      return svc.data.stats[name].total;
    };
    svc.forEachStat = function(model, func){
      var i$, ref$, len$, statName, stat, ref1$;
      model == null && (model = svc.data);
      for (i$ = 0, len$ = (ref$ = svc.PcModel.Stats).length; i$ < len$; ++i$) {
        statName = ref$[i$];
        stat = (model.stats || (model.stats = {}))[statName];
        (model.stats || (model.stats = {}))[statName] = (ref1$ = func(stat, statName)) != null ? ref1$ : stat;
      }
    };
    svc.loadUserData = function(){
      var data, model;
      data = storageSvc.load('pc' != null
        ? 'pc'
        : {});
      model = import$(new svc.PcModel(svc), data);
      model.forEachStat(function(stat, name){
        var x$, ref$;
        x$ = import$(new svc.PcStatModel, data != null ? (ref$ = data.stats) != null ? ref$[name] : void 8 : void 8);
        x$.name = name;
        return x$;
      });
      model.validate();
      svc.data = model;
      return model;
    };
    svc.saveUserData = function(model){
      var data, key, value;
      model == null && (model = svc.data);
      model.validate();
      data = import$({}, model);
      for (key in model) {
        value = model[key];
        if (key !== 'stats') {
          delete data[key];
        }
      }
      storageSvc.save('pc', data);
    };
    svc.statScalingFactorOf = function(name){
      var statValue, thresholds, result, i$, len$, threshold;
      svc.loadUserData();
      statValue = svc.statValueOf(name);
      thresholds = (function(){
        switch (name) {
        case 'strength':
          // fallthrough
        case 'dexterity':
          return [[10, 0.5], [10, 3.5], [20, 2.25]];
        case 'intelligence':
          // fallthrough
        case 'faith':
          return [[10, 0.5], [20, 2.25], [20, 1.5]];
        default:
          throw Error('unimplemented');
        }
      }());
      result = 0;
      for (i$ = 0, len$ = thresholds.length; i$ < len$; ++i$) {
        threshold = thresholds[i$];
        if (statValue >= threshold[0]) {
          result += threshold[0] * threshold[1];
        } else {
          result += statValue * threshold[1];
        }
        statValue -= threshold[0];
        if (statValue < 1) {
          break;
        }
      }
      result /= 100;
      return result;
    };
    return svc;
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./models/PcModel":34,"./models/PcStatModel":35}],37:[function(require,module,exports){
(function(){
  angular.module("dsc").controller("WeaponCalcController", function($q, $scope, itemSvc, inventorySvc, pcService, uiGridConstants){
    var x$, _addResult;
    $scope.results = [];
    $scope.statBonus = 0;
    $scope.ignoreCrystal = true;
    x$ = $scope.gridOptions = require('./controller/gridOptions')(uiGridConstants);
    x$.data = $scope.results;
    _addResult = function(type, weapon){
      var scS, scD, scI, scF, str, dex, int, fai, dmgN, dmgM, defN, score, x$, result;
      scS = pcService.statScalingFactorOf('strength');
      scD = pcService.statScalingFactorOf('dexterity');
      scI = pcService.statScalingFactorOf('intelligence');
      scF = pcService.statScalingFactorOf('faith');
      str = $scope.statBonus + pcService.statValueOf('strength');
      dex = $scope.statBonus + pcService.statValueOf('dexterity');
      int = $scope.statBonus + pcService.statValueOf('intelligence');
      fai = $scope.statBonus + pcService.statValueOf('faith');
      if (weapon.reqS > str || weapon.reqD > dex || weapon.reqI > int || weapon.reqF > fai) {
        return;
      }
      dmgN = weapon.dmgN * (1 + (weapon.scS * scS + weapon.scD * scD));
      dmgM = weapon.dmgM * (1 + (weapon.scI * scI + weapon.scF * scF));
      defN = weapon.defN + (weapon.defM + weapon.defF + weapon.defL) * 0.2 + weapon.defS;
      score = type === 'defence' ? defN : dmgN;
      x$ = result = {};
      x$.weapon = weapon;
      x$.score = score;
      $scope.gridOptions.data.push(result);
    };
    $scope.calculate = function(type){
      var items, weapons, inventory;
      type == null && (type = 'offence');
      $scope.gridOptions.data = [];
      items = itemSvc.loadItemData('items');
      weapons = itemSvc.loadItemData('weapons');
      inventory = inventorySvc.loadUserInventory();
      $q.all([weapons.$promise, items.$promise]).then(function(){
        var availableWeapons, data, i$, len$, weapon, lresult$, materials, promise, j$, iteration, results$ = [];
        availableWeapons = reject(function(it){
          return it == null || ($scope.ignoreCrystal && take(4)(
          it.name) === 'Crys');
        })(
        map(function(item){
          return find(function(it){
            return it.id === item.id;
          })(
          weapons);
        })(
        inventory));
        data = {};
        for (i$ = 0, len$ = availableWeapons.length; i$ < len$; ++i$) {
          weapon = availableWeapons[i$];
          lresult$ = [];
          materials = map(fn$)(
          inventory);
          promise = $q(fn1$);
          for (j$ = 0; j$ <= 15; ++j$) {
            iteration = j$;
            lresult$.push(fn2$(weapon, materials, iteration));
          }
          results$.push(lresult$);
        }
        return results$;
        function fn$(it){
          return import$({}, it);
        }
        function fn1$(resolve, reject){
          resolve();
        }
        function fn2$(weapon, materials, iteration){
          promise = promise.then(function(){
            return itemSvc.canUpgradeWithMaterials(weapon, materials, iteration);
          }).then(function(canUpgrade){
            if (canUpgrade) {
              return $q.all([itemSvc.getUpgradedVersionOf(weapon, iteration), itemSvc.payForUpgradeFor(weapon, materials, iteration)]);
            } else {
              materials.length = 0;
              return null;
            }
          }).then(function(result){
            var upWeapon;
            upWeapon = result != null ? result[0] : void 8;
            if (upWeapon != null) {
              _addResult(type, upWeapon);
            }
          });
        }
      });
    };
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./controller/gridOptions":38}],38:[function(require,module,exports){
(function(){
  if (typeof module != 'undefined' && module !== null) {
    module.exports = function(uiGridConstants){
      var percentFieldMinWidth;
      percentFieldMinWidth = 45;
      return {
        columnDefs: [
          {
            field: 'score',
            minWidth: 50,
            cellFilter: 'number:2',
            sort: {
              direction: uiGridConstants.DESC,
              priority: 1
            },
            type: 'number'
          }, {
            field: 'weapon.name',
            minWidth: 210
          }, {
            field: 'weapon.reqS',
            displayName: 'RS',
            type: 'number'
          }, {
            field: 'weapon.reqD',
            displayName: 'RD',
            type: 'number'
          }, {
            field: 'weapon.reqI',
            displayName: 'RI',
            type: 'number'
          }, {
            field: 'weapon.reqF',
            displayName: 'RF',
            type: 'number'
          }, {
            field: 'weapon.dmgN',
            displayName: 'AP',
            type: 'number'
          }, {
            field: 'weapon.dmgM',
            displayName: 'AM',
            type: 'number'
          }, {
            field: 'weapon.dmgF',
            displayName: 'AF',
            type: 'number'
          }, {
            field: 'weapon.dmgL',
            displayName: 'AL',
            type: 'number'
          }, {
            field: 'weapon.dmgS',
            displayName: 'AS',
            type: 'number'
          }, {
            field: 'weapon.scS',
            displayName: 'SS',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage',
            type: 'number'
          }, {
            field: 'weapon.scD',
            displayName: 'SD',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage',
            type: 'number'
          }, {
            field: 'weapon.scI',
            displayName: 'SI',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage',
            type: 'number'
          }, {
            field: 'weapon.scF',
            displayName: 'SF',
            minWidth: percentFieldMinWidth,
            cellFilter: 'percentage',
            type: 'number'
          }, {
            field: 'weapon.defN',
            displayName: 'DP',
            type: 'number'
          }, {
            field: 'weapon.defM',
            displayName: 'DM',
            type: 'number'
          }, {
            field: 'weapon.defF',
            displayName: 'DF',
            type: 'number'
          }, {
            field: 'weapon.defL',
            displayName: 'DL',
            type: 'number'
          }, {
            field: 'weapon.defT',
            displayName: 'DT',
            type: 'number'
          }, {
            field: 'weapon.defB',
            displayName: 'DB',
            type: 'number'
          }, {
            field: 'weapon.defC',
            displayName: 'DC',
            type: 'number'
          }, {
            field: 'weapon.defS',
            displayName: 'St',
            type: 'number'
          }, {
            field: 'weapon.divMod',
            minWidth: percentFieldMinWidth,
            displayName: 'Div',
            cellFilter: 'percentage',
            type: 'number'
          }, {
            field: 'weapon.occMod',
            minWidth: percentFieldMinWidth,
            displayName: 'Occ',
            cellFilter: 'percentage',
            type: 'number'
          }, {
            field: 'weapon.weight',
            displayName: 'Wt',
            type: 'number'
          }
        ]
      };
    };
  }
}).call(this);

},{}],39:[function(require,module,exports){
(function(){
  angular.module("dsc");
  require('./controller');
}).call(this);

},{"./controller":37}]},{},[7])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
